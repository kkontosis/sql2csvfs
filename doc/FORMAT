sql2text TEXT FILE FORMAT

The sql2text text file format
================================================================================

Database tables in sql2text are displayed in the form of text files.
One table corresponds to one text file. Each text line represents a single 
record in the table.
The format is a special CSV format (comma-separated values) with the use 
of `tab' as the delimiter.

In more detail, the text file format is the following: 

1. The header row
================================================================================
The first line of the sql2text text file is the table header. 
It is a tab-separated list of the table columns, separated by tab.
Each one of the columns in the header is displayed by the column name
and a short description, in the following form:

        <column-name>(<data-type>)[<special-attributes>]

The data-type is a short description that represents the data type.
Possible data types are:

        i    ->    integer
        I    ->    integer, large
        f    ->    floating point
        F    ->    floating point, high precision (double)
        c    ->    char
        v    ->    varchar
        t    ->    text
        T    ->    text, long
        d    ->    date
        D    ->    datetime
        h    ->    time
        H    ->    timestamp
        b    ->    binary
        B    ->    blob
	
Certain types also have a size. For example the following types have a size:

        c<size>
        v<size>

For example, the following column description uses a type same as `char(10)`:

        name(c10)

The special attributes of a column description are optional.
The possible special attributes are:

        !    ->    PRIMARY KEY
        +    ->    AUTOMATICALLY INCREMENTED (FOR INDEX ID)
        *    ->    NOT NULL

If combined, they attributes are displayed in that order. 
However the `*' attribute is not used when `!' or `+' is present.
Note that a primary key of multiple columns is possible, in which case all the
participating columns have the `!' attribute.

An example of a header having the column `id' as an automatically indexed
primary key and the column `name` as not null is:

    id(i)!+	name(c64)*	university(c64)	description(T)

2. The record rows
================================================================================
The lines that follow right after the header line are records. 
One record is one line. The record fields of a line are separated by tab 
and they are given in the same order as the columns of the table header.

For example, in a table with the header:

    id(i)!+	name(c64)*	university(c64)	description(T)

A possible record could be:

    1	Kimon Kontosis	N. & K. University of Athens	sql2textfs developer

In many CSV file formats, the double quotes ("") are used to enclose a record
that contains white spaces. This is not the case in sql2text.
There is no special meaning for the double quotes ("") in sql2text and it can
be used like any other character. White spaces can also be used normally as
they do not separate columns. The only separators are `tab' and the new line.

In order to represent the actual `tab' and new line characters in the data
as well as certain other special characters, the escape character ('\') is
used.

The character `\' in the sql2text file format is the escape character.
Using `\' alone has no meaning, while using it in combination with any other 
character gives only the second character in the data. For example,
in order to represent a single `\', we need to use a double `\\'.
Most characters when used after `\' behave in that way:

        \\    ->    \
        \%    ->    %

etc.

There are however certain special uses of `\', which also allow the use of tab:

        \N     ->    NULL entry in a table row
        \t     ->    tab
        \n     ->    new line
        \r     ->    carriage return
        \{<n>} ->    ASCII character with decimal code <n>

An example of the last rule is:

        \{65}  ->    A

3. Examples of the text file format
================================================================================

We take as an example a mysql database that has the table:

        `information_schema.COLLATION_CHARACTER_SET_APPLICABILITY'

This table can be displayed in sql2text file format as shown below:

        COLLATION_NAME(v32)*	CHARACTER_SET_NAME(v32)*
        big5_chinese_ci	big5
        big5_bin	big5
        dec8_swedish_ci	dec8
        dec8_bin	dec8
        cp850_general_ci	cp850
        cp850_bin	cp850
        hp8_english_ci	hp8
        hp8_bin	hp8
        koi8r_general_ci	koi8r
        koi8r_bin	koi8r
        latin1_german1_ci	latin1
        latin1_swedish_ci	latin1
        latin1_danish_ci	latin1
        latin1_german2_ci	latin1
        latin1_bin	latin1
        latin1_general_ci	latin1
        latin1_general_cs	latin1
        latin1_spanish_ci	latin1
        latin2_czech_cs	latin2
        latin2_general_ci	latin2
        latin2_hungarian_ci	latin2
        latin2_croatian_ci	latin2
        latin2_bin	latin2
        swe7_swedish_ci	swe7
        swe7_bin	swe7
        ascii_general_ci	ascii
        ascii_bin	ascii
        ujis_japanese_ci	ujis
        ujis_bin	ujis
        sjis_japanese_ci	sjis
        sjis_bin	sjis
        hebrew_general_ci	hebrew
        hebrew_bin	hebrew
        filename	filename
        tis620_thai_ci	tis620
        tis620_bin	tis620
        euckr_korean_ci	euckr
        euckr_bin	euckr
        koi8u_general_ci	koi8u
        koi8u_bin	koi8u
        gb2312_chinese_ci	gb2312
        gb2312_bin	gb2312
        greek_general_ci	greek
        greek_bin	greek
        cp1250_general_ci	cp1250
        cp1250_czech_cs	cp1250
        cp1250_croatian_ci	cp1250
        cp1250_bin	cp1250
        cp1250_polish_ci	cp1250
        gbk_chinese_ci	gbk
        gbk_bin	gbk
        latin5_turkish_ci	latin5
        latin5_bin	latin5
        armscii8_general_ci	armscii8
        armscii8_bin	armscii8
        utf8_general_ci	utf8
        utf8_bin	utf8
        utf8_unicode_ci	utf8
        utf8_icelandic_ci	utf8
        utf8_latvian_ci	utf8
        utf8_romanian_ci	utf8
        utf8_slovenian_ci	utf8
        utf8_polish_ci	utf8
        utf8_estonian_ci	utf8
        utf8_spanish_ci	utf8
        utf8_swedish_ci	utf8
        utf8_turkish_ci	utf8
        utf8_czech_ci	utf8
        utf8_danish_ci	utf8
        utf8_lithuanian_ci	utf8
        utf8_slovak_ci	utf8
        utf8_spanish2_ci	utf8
        utf8_roman_ci	utf8
        utf8_persian_ci	utf8
        utf8_esperanto_ci	utf8
        utf8_hungarian_ci	utf8
        ucs2_general_ci	ucs2
        ucs2_bin	ucs2
        ucs2_unicode_ci	ucs2
        ucs2_icelandic_ci	ucs2
        ucs2_latvian_ci	ucs2
        ucs2_romanian_ci	ucs2
        ucs2_slovenian_ci	ucs2
        ucs2_polish_ci	ucs2
        ucs2_estonian_ci	ucs2
        ucs2_spanish_ci	ucs2
        ucs2_swedish_ci	ucs2
        ucs2_turkish_ci	ucs2
        ucs2_czech_ci	ucs2
        ucs2_danish_ci	ucs2
        ucs2_lithuanian_ci	ucs2
        ucs2_slovak_ci	ucs2
        ucs2_spanish2_ci	ucs2
        ucs2_roman_ci	ucs2
        ucs2_persian_ci	ucs2
        ucs2_esperanto_ci	ucs2
        ucs2_hungarian_ci	ucs2
        cp866_general_ci	cp866
        cp866_bin	cp866
        keybcs2_general_ci	keybcs2
        keybcs2_bin	keybcs2
        macce_general_ci	macce
        macce_bin	macce
        macroman_general_ci	macroman
        macroman_bin	macroman
        cp852_general_ci	cp852
        cp852_bin	cp852
        latin7_estonian_cs	latin7
        latin7_general_ci	latin7
        latin7_general_cs	latin7
        latin7_bin	latin7
        cp1251_bulgarian_ci	cp1251
        cp1251_ukrainian_ci	cp1251
        cp1251_bin	cp1251
        cp1251_general_ci	cp1251
        cp1251_general_cs	cp1251
        cp1256_general_ci	cp1256
        cp1256_bin	cp1256
        cp1257_lithuanian_ci	cp1257
        cp1257_bin	cp1257
        cp1257_general_ci	cp1257
        binary	binary
        geostd8_general_ci	geostd8
        geostd8_bin	geostd8
        cp932_japanese_ci	cp932
        cp932_bin	cp932
        eucjpms_japanese_ci	eucjpms
        eucjpms_bin	eucjpms
    
